-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_9_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_10_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_11_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv26_3FFFD85 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110110000101";
    constant ap_const_lv22_3FFFEB : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111101011";
    constant ap_const_lv26_3FFFEBC : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010111100";
    constant ap_const_lv26_216 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000010110";
    constant ap_const_lv26_227 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000100111";
    constant ap_const_lv26_3FFFECD : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111011001101";
    constant ap_const_lv26_3FFFEB2 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010110010";
    constant ap_const_lv24_6C : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001101100";
    constant ap_const_lv26_18A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110001010";
    constant ap_const_lv25_1FFFF65 : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111101100101";
    constant ap_const_lv25_1FFFF69 : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111101101001";
    constant ap_const_lv26_205 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000101";
    constant ap_const_lv26_3FFFE99 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010011001";
    constant ap_const_lv26_236 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000110110";
    constant ap_const_lv26_3FFFDD1 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110111010001";
    constant ap_const_lv26_3FFFE8F : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010001111";
    constant ap_const_lv26_3FFFDF7 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110111110111";
    constant ap_const_lv26_244 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001001000100";
    constant ap_const_lv26_17E : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000101111110";
    constant ap_const_lv21_B : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_585 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln42_1_reg_1009 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln42_5_reg_1014 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln58_1_fu_729_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_1_reg_1019 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_12_fu_735_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_12_reg_1024 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_545_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_10_reg_1029 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_11_reg_1034 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln70_6_fu_822_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln70_6_reg_1039 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln42_13_reg_1044 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_3_fu_843_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_3_reg_1049 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_14_fu_855_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_14_reg_1054 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_16_reg_1059 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_555_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_17_reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_18_reg_1069 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln42_19_reg_1074 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_5_fu_902_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_5_reg_1079 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_16_fu_907_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_16_reg_1084 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_4_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_5_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_6_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_7_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_8_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_9_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_10_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_11_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_2_fu_658_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln70_5_fu_807_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln70_7_fu_866_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln73_7_fu_922_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_203_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln73_2_fu_652_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln70_3_fu_753_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_203_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_1_fu_703_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln70_8_fu_872_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_204_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_fu_589_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln70_2_fu_747_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_205_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_206_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_8_fu_861_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_206_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_207_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_4_fu_708_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln70_4_fu_802_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln70_9_fu_877_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_207_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln70_fu_589_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_594_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln_fu_594_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_608_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_608_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln73_1_fu_620_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln73_1_fu_620_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln73_fu_616_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln73_1_fu_628_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln73_fu_632_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln42_s_fu_638_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln42_2_fu_658_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln73_2_fu_663_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln73_2_fu_663_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln73_3_fu_675_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln73_3_fu_675_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln73_3_fu_671_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln73_4_fu_683_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln73_1_fu_687_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln70_1_fu_703_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_4_fu_708_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_5_fu_713_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_535_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_fu_723_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_fu_604_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_1_fu_648_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_3_fu_753_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln73_4_fu_758_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln73_4_fu_758_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln73_5_fu_770_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln73_5_fu_770_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln73_5_fu_766_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln73_6_fu_778_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln73_2_fu_782_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln42_7_fu_788_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln70_4_fu_802_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_5_fu_807_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_11_fu_812_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_575_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_6_fu_798_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_2_fu_837_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_5_fu_744_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_13_fu_849_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_3_fu_741_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_8_fu_872_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_9_fu_877_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_18_fu_882_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln42_19_fu_892_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln42_7_fu_913_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_9_fu_916_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_8_fu_942_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_7_fu_937_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_9_fu_948_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_6_fu_932_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_10_fu_954_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_4_fu_928_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_10_fu_919_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_18_fu_974_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_19_fu_980_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_17_fu_970_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_20_fu_985_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_15_fu_966_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_11_fu_960_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_21_fu_991_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_16s_12s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_16s_11s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_16s_11ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mul_16s_12s_26_1_1_U238 : component myproject_mul_16s_12s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_202_p0,
        din1 => grp_fu_202_p1,
        dout => grp_fu_202_p2);

    mul_16s_12s_26_1_1_U239 : component myproject_mul_16s_12s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_203_p0,
        din1 => grp_fu_203_p1,
        dout => grp_fu_203_p2);

    mul_16s_11s_26_1_1_U240 : component myproject_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_204_p0,
        din1 => grp_fu_204_p1,
        dout => grp_fu_204_p2);

    mul_16s_12s_26_1_1_U241 : component myproject_mul_16s_12s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_205_p0,
        din1 => grp_fu_205_p1,
        dout => grp_fu_205_p2);

    mul_16s_11s_26_1_1_U242 : component myproject_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_206_p0,
        din1 => grp_fu_206_p1,
        dout => grp_fu_206_p2);

    mul_16s_11ns_26_1_1_U243 : component myproject_mul_16s_11ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_207_p0,
        din1 => grp_fu_207_p1,
        dout => grp_fu_207_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln58_12_reg_1024 <= add_ln58_12_fu_735_p2;
                add_ln58_1_reg_1019 <= add_ln58_1_fu_729_p2;
                trunc_ln42_1_reg_1009 <= add_ln73_1_fu_687_p2(22 downto 10);
                trunc_ln42_5_reg_1014 <= trunc_ln42_5_fu_713_p1(23 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln58_14_reg_1054 <= add_ln58_14_fu_855_p2;
                add_ln58_3_reg_1049 <= add_ln58_3_fu_843_p2;
                sext_ln70_6_reg_1039 <= sext_ln70_6_fu_822_p1;
                trunc_ln42_10_reg_1029 <= grp_fu_203_p2(25 downto 10);
                trunc_ln42_11_reg_1034 <= trunc_ln42_11_fu_812_p1(21 downto 10);
                trunc_ln42_13_reg_1044 <= grp_fu_204_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln58_16_reg_1084 <= add_ln58_16_fu_907_p2;
                add_ln58_5_reg_1079 <= add_ln58_5_fu_902_p2;
                trunc_ln42_16_reg_1059 <= grp_fu_203_p2(25 downto 10);
                trunc_ln42_17_reg_1064 <= grp_fu_202_p2(25 downto 10);
                trunc_ln42_18_reg_1069 <= trunc_ln42_18_fu_882_p1(20 downto 10);
                trunc_ln42_19_reg_1074 <= trunc_ln42_19_fu_892_p1(24 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ap_port_reg_data_10_val <= data_10_val;
                ap_port_reg_data_11_val <= data_11_val;
                ap_port_reg_data_4_val <= data_4_val;
                ap_port_reg_data_5_val <= data_5_val;
                ap_port_reg_data_6_val <= data_6_val;
                ap_port_reg_data_7_val <= data_7_val;
                ap_port_reg_data_8_val <= data_8_val;
                ap_port_reg_data_9_val <= data_9_val;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then
                reg_585 <= grp_fu_207_p2(25 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln58_10_fu_954_p2 <= std_logic_vector(unsigned(add_ln58_9_fu_948_p2) + unsigned(add_ln58_6_fu_932_p2));
    add_ln58_11_fu_960_p2 <= std_logic_vector(unsigned(add_ln58_10_fu_954_p2) + unsigned(add_ln58_4_fu_928_p2));
    add_ln58_12_fu_735_p2 <= std_logic_vector(unsigned(grp_fu_545_p4) + unsigned(sext_ln42_1_fu_648_p1));
    add_ln58_13_fu_849_p2 <= std_logic_vector(signed(sext_ln42_5_fu_744_p1) + signed(grp_fu_535_p4));
    add_ln58_14_fu_855_p2 <= std_logic_vector(unsigned(add_ln58_13_fu_849_p2) + unsigned(sext_ln42_3_fu_741_p1));
    add_ln58_15_fu_966_p2 <= std_logic_vector(unsigned(add_ln58_14_reg_1054) + unsigned(add_ln58_12_reg_1024));
    add_ln58_16_fu_907_p2 <= std_logic_vector(unsigned(reg_585) + unsigned(grp_fu_575_p4));
    add_ln58_17_fu_970_p2 <= std_logic_vector(unsigned(add_ln58_16_reg_1084) + unsigned(trunc_ln42_10_reg_1029));
    add_ln58_18_fu_974_p2 <= std_logic_vector(signed(sext_ln42_10_fu_919_p1) + signed(grp_fu_555_p4));
    add_ln58_19_fu_980_p2 <= std_logic_vector(unsigned(add_ln58_18_fu_974_p2) + unsigned(trunc_ln42_17_reg_1064));
    add_ln58_1_fu_729_p2 <= std_logic_vector(unsigned(add_ln58_fu_723_p2) + unsigned(sext_ln42_fu_604_p1));
    add_ln58_20_fu_985_p2 <= std_logic_vector(unsigned(add_ln58_19_fu_980_p2) + unsigned(add_ln58_17_fu_970_p2));
    add_ln58_21_fu_991_p2 <= std_logic_vector(unsigned(add_ln58_20_fu_985_p2) + unsigned(add_ln58_15_fu_966_p2));
    add_ln58_2_fu_837_p2 <= std_logic_vector(unsigned(grp_fu_575_p4) + unsigned(sext_ln42_6_fu_798_p1));
    add_ln58_3_fu_843_p2 <= std_logic_vector(unsigned(add_ln58_2_fu_837_p2) + unsigned(reg_585));
    add_ln58_4_fu_928_p2 <= std_logic_vector(unsigned(add_ln58_3_reg_1049) + unsigned(add_ln58_1_reg_1019));
    add_ln58_5_fu_902_p2 <= std_logic_vector(unsigned(trunc_ln42_13_reg_1044) + unsigned(grp_fu_535_p4));
    add_ln58_6_fu_932_p2 <= std_logic_vector(unsigned(add_ln58_5_reg_1079) + unsigned(sext_ln42_7_fu_913_p1));
    add_ln58_7_fu_937_p2 <= std_logic_vector(unsigned(trunc_ln42_16_reg_1059) + unsigned(sext_ln42_9_fu_916_p1));
    add_ln58_8_fu_942_p2 <= std_logic_vector(unsigned(grp_fu_575_p4) + unsigned(ap_const_lv16_FFFF));
    add_ln58_9_fu_948_p2 <= std_logic_vector(unsigned(add_ln58_8_fu_942_p2) + unsigned(add_ln58_7_fu_937_p2));
    add_ln58_fu_723_p2 <= std_logic_vector(unsigned(grp_fu_535_p4) + unsigned(grp_fu_555_p4));
    add_ln73_1_fu_687_p2 <= std_logic_vector(signed(sext_ln73_3_fu_671_p1) + signed(sext_ln73_4_fu_683_p1));
    add_ln73_2_fu_782_p2 <= std_logic_vector(signed(sext_ln73_5_fu_766_p1) + signed(sext_ln73_6_fu_778_p1));
    add_ln73_fu_632_p2 <= std_logic_vector(signed(sext_ln73_fu_616_p1) + signed(sext_ln73_1_fu_628_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_ce)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= add_ln58_11_fu_960_p2;
    ap_return_1 <= add_ln58_21_fu_991_p2;

    grp_fu_202_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln42_2_fu_658_p1, sext_ln70_5_fu_807_p1, sext_ln70_7_fu_866_p1, sext_ln73_7_fu_922_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_202_p0 <= sext_ln73_7_fu_922_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_202_p0 <= sext_ln70_7_fu_866_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_202_p0 <= sext_ln70_5_fu_807_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_202_p0 <= sext_ln42_2_fu_658_p1(16 - 1 downto 0);
        else 
            grp_fu_202_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_202_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_202_p1 <= ap_const_lv26_216(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_202_p1 <= ap_const_lv26_3FFFEBC(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_202_p1 <= ap_const_lv22_3FFFEB(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_202_p1 <= ap_const_lv26_3FFFD85(12 - 1 downto 0);
        else 
            grp_fu_202_p1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_203_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, sext_ln70_7_fu_866_p1, sext_ln73_2_fu_652_p1, sext_ln70_3_fu_753_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_203_p0 <= sext_ln70_7_fu_866_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_203_p0 <= sext_ln70_3_fu_753_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_203_p0 <= sext_ln73_2_fu_652_p1(16 - 1 downto 0);
        else 
            grp_fu_203_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_203_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_203_p1 <= ap_const_lv26_3FFFEB2(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_203_p1 <= ap_const_lv26_3FFFECD(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_203_p1 <= ap_const_lv26_227(12 - 1 downto 0);
        else 
            grp_fu_203_p1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_204_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, sext_ln70_6_fu_822_p1, ap_CS_fsm_state3, sext_ln70_1_fu_703_p1, sext_ln70_8_fu_872_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_204_p0 <= sext_ln70_8_fu_872_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_204_p0 <= sext_ln70_6_fu_822_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_204_p0 <= sext_ln70_1_fu_703_p1(16 - 1 downto 0);
        else 
            grp_fu_204_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_204_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_204_p1 <= ap_const_lv25_1FFFF65(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_204_p1 <= ap_const_lv26_18A(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_204_p1 <= ap_const_lv24_6C(11 - 1 downto 0);
        else 
            grp_fu_204_p1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_205_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, sext_ln70_6_reg_1039, ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln73_7_fu_922_p1, sext_ln70_fu_589_p1, sext_ln70_2_fu_747_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_205_p0 <= sext_ln73_7_fu_922_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_205_p0 <= sext_ln70_6_reg_1039(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_205_p0 <= sext_ln70_2_fu_747_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_205_p0 <= sext_ln70_fu_589_p1(16 - 1 downto 0);
        else 
            grp_fu_205_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_205_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_205_p1 <= ap_const_lv26_236(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_205_p1 <= ap_const_lv26_3FFFE99(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_205_p1 <= ap_const_lv26_205(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_205_p1 <= ap_const_lv25_1FFFF69(12 - 1 downto 0);
        else 
            grp_fu_205_p1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_206_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, sext_ln73_2_fu_652_p1, sext_ln70_2_fu_747_p1, sext_ln42_8_fu_861_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_206_p0 <= sext_ln42_8_fu_861_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_206_p0 <= sext_ln70_2_fu_747_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_206_p0 <= sext_ln73_2_fu_652_p1(16 - 1 downto 0);
        else 
            grp_fu_206_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_206_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_206_p1 <= ap_const_lv26_3FFFDF7(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_206_p1 <= ap_const_lv26_3FFFE8F(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_206_p1 <= ap_const_lv26_3FFFDD1(11 - 1 downto 0);
        else 
            grp_fu_206_p1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_207_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, sext_ln42_4_fu_708_p1, sext_ln70_4_fu_802_p1, sext_ln70_9_fu_877_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_207_p0 <= sext_ln70_9_fu_877_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_207_p0 <= sext_ln70_4_fu_802_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_207_p0 <= sext_ln42_4_fu_708_p1(16 - 1 downto 0);
        else 
            grp_fu_207_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_207_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_207_p1 <= ap_const_lv21_B(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_207_p1 <= ap_const_lv26_17E(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_207_p1 <= ap_const_lv26_244(11 - 1 downto 0);
        else 
            grp_fu_207_p1 <= "XXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_535_p4 <= grp_fu_206_p2(25 downto 10);
    grp_fu_545_p4 <= grp_fu_203_p2(25 downto 10);
    grp_fu_555_p4 <= grp_fu_202_p2(25 downto 10);
    grp_fu_575_p4 <= grp_fu_205_p2(25 downto 10);
        sext_ln42_10_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_19_reg_1074),16));

        sext_ln42_1_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_s_fu_638_p4),16));

    sext_ln42_2_fu_658_p0 <= data_2_val;
        sext_ln42_2_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln42_2_fu_658_p0),26));

        sext_ln42_3_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_1_reg_1009),16));

    sext_ln42_4_fu_708_p0 <= data_3_val;
        sext_ln42_4_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln42_4_fu_708_p0),26));

        sext_ln42_5_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_5_reg_1014),16));

        sext_ln42_6_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_7_fu_788_p4),16));

        sext_ln42_7_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_11_reg_1034),16));

        sext_ln42_8_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_8_val),26));

        sext_ln42_9_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_18_reg_1069),16));

        sext_ln42_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_594_p4),16));

    sext_ln70_1_fu_703_p0 <= data_3_val;
        sext_ln70_1_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_1_fu_703_p0),24));

        sext_ln70_2_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_4_val),26));

    sext_ln70_3_fu_753_p0 <= ap_port_reg_data_5_val;
        sext_ln70_3_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_3_fu_753_p0),26));

    sext_ln70_4_fu_802_p0 <= ap_port_reg_data_6_val;
        sext_ln70_4_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_4_fu_802_p0),26));

    sext_ln70_5_fu_807_p0 <= ap_port_reg_data_6_val;
        sext_ln70_5_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_5_fu_807_p0),22));

        sext_ln70_6_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_7_val),26));

        sext_ln70_7_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_9_val),26));

    sext_ln70_8_fu_872_p0 <= ap_port_reg_data_10_val;
        sext_ln70_8_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_8_fu_872_p0),25));

    sext_ln70_9_fu_877_p0 <= ap_port_reg_data_10_val;
        sext_ln70_9_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_9_fu_877_p0),21));

    sext_ln70_fu_589_p0 <= data_0_val;
        sext_ln70_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_fu_589_p0),25));

        sext_ln73_1_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln73_1_fu_620_p3),25));

        sext_ln73_2_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_1_val),26));

        sext_ln73_3_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln73_2_fu_663_p3),23));

        sext_ln73_4_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln73_3_fu_675_p3),23));

        sext_ln73_5_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln73_4_fu_758_p3),23));

        sext_ln73_6_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln73_5_fu_770_p3),23));

        sext_ln73_7_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_11_val),26));

        sext_ln73_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_608_p3),25));

    shl_ln73_1_fu_620_p1 <= data_0_val;
    shl_ln73_1_fu_620_p3 <= (shl_ln73_1_fu_620_p1 & ap_const_lv3_0);
    shl_ln73_2_fu_663_p1 <= data_2_val;
    shl_ln73_2_fu_663_p3 <= (shl_ln73_2_fu_663_p1 & ap_const_lv6_0);
    shl_ln73_3_fu_675_p1 <= data_2_val;
    shl_ln73_3_fu_675_p3 <= (shl_ln73_3_fu_675_p1 & ap_const_lv1_0);
    shl_ln73_4_fu_758_p1 <= ap_port_reg_data_5_val;
    shl_ln73_4_fu_758_p3 <= (shl_ln73_4_fu_758_p1 & ap_const_lv6_0);
    shl_ln73_5_fu_770_p1 <= ap_port_reg_data_5_val;
    shl_ln73_5_fu_770_p3 <= (shl_ln73_5_fu_770_p1 & ap_const_lv2_0);
    shl_ln_fu_608_p1 <= data_0_val;
    shl_ln_fu_608_p3 <= (shl_ln_fu_608_p1 & ap_const_lv8_0);
    trunc_ln42_11_fu_812_p1 <= grp_fu_202_p2(22 - 1 downto 0);
    trunc_ln42_18_fu_882_p1 <= grp_fu_207_p2(21 - 1 downto 0);
    trunc_ln42_19_fu_892_p1 <= grp_fu_204_p2(25 - 1 downto 0);
    trunc_ln42_5_fu_713_p1 <= grp_fu_204_p2(24 - 1 downto 0);
    trunc_ln42_7_fu_788_p4 <= add_ln73_2_fu_782_p2(22 downto 10);
    trunc_ln42_s_fu_638_p4 <= add_ln73_fu_632_p2(24 downto 10);
    trunc_ln_fu_594_p1 <= grp_fu_205_p2(25 - 1 downto 0);
    trunc_ln_fu_594_p4 <= trunc_ln_fu_594_p1(24 downto 10);
end behav;
