// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config7_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_val,
        data_1_val,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_val;
input  [15:0] data_1_val;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [16:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [16:0] exp_table_q1;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
wire    ap_block_pp0_stage0_11001;
reg   [16:0] exp_table_load_reg_393;
reg   [16:0] exp_table_load_1_reg_398;
wire   [63:0] zext_ln255_fu_242_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_1_fu_273_p1;
wire   [63:0] zext_ln265_fu_324_p1;
wire  signed [15:0] icmp_ln66_fu_104_p0;
wire  signed [15:0] icmp_ln66_fu_104_p1;
wire   [0:0] icmp_ln66_fu_104_p2;
wire   [0:0] xor_ln66_fu_110_p2;
wire  signed [15:0] x_max_fu_116_p1;
wire  signed [15:0] x_max_fu_116_p2;
wire  signed [15:0] sext_ln245_fu_124_p0;
wire   [15:0] x_max_fu_116_p3;
wire  signed [16:0] sext_ln245_fu_124_p1;
wire  signed [16:0] sext_ln245_1_fu_128_p1;
wire   [16:0] sub_ln245_fu_132_p2;
wire   [0:0] tmp_2_fu_138_p3;
wire   [0:0] tmp_3_fu_146_p3;
wire   [0:0] xor_ln245_fu_154_p2;
wire  signed [15:0] sext_ln245_2_fu_172_p0;
wire  signed [16:0] sext_ln245_2_fu_172_p1;
wire   [16:0] sub_ln245_1_fu_176_p2;
wire   [0:0] tmp_4_fu_182_p3;
wire   [0:0] tmp_5_fu_190_p3;
wire   [0:0] xor_ln245_2_fu_198_p2;
wire   [0:0] and_ln245_fu_160_p2;
wire   [0:0] xor_ln245_1_fu_166_p2;
wire   [9:0] select_ln245_fu_216_p3;
wire   [9:0] tmp_fu_224_p4;
wire   [9:0] select_ln245_1_fu_234_p3;
wire   [0:0] and_ln245_1_fu_204_p2;
wire   [0:0] xor_ln245_3_fu_210_p2;
wire   [9:0] select_ln245_2_fu_247_p3;
wire   [9:0] tmp_1_fu_255_p4;
wire   [9:0] select_ln245_3_fu_265_p3;
wire   [17:0] zext_ln51_fu_282_p1;
wire   [17:0] zext_ln245_fu_278_p1;
wire   [17:0] add_ln51_fu_292_p2;
wire   [16:0] add_ln51_1_fu_286_p2;
wire   [0:0] tmp_6_fu_298_p3;
wire   [8:0] tmp_2_cast_fu_306_p4;
wire   [8:0] select_ln51_fu_316_p3;
wire  signed [17:0] mul_ln268_fu_336_p0;
wire  signed [25:0] sext_ln268_fu_329_p1;
wire   [16:0] mul_ln268_fu_336_p1;
wire   [25:0] mul_ln268_fu_336_p2;
wire  signed [17:0] mul_ln268_1_fu_355_p0;
wire   [16:0] mul_ln268_1_fu_355_p1;
wire   [25:0] mul_ln268_1_fu_355_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] mul_ln268_1_fu_355_p10;
wire   [25:0] mul_ln268_fu_336_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config7_s_exp_table_ROM_Abkb #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1)
);

myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config7_s_invert_table_ROcud #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

myproject_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U258(
    .din0(mul_ln268_fu_336_p0),
    .din1(mul_ln268_fu_336_p1),
    .dout(mul_ln268_fu_336_p2)
);

myproject_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U259(
    .din0(mul_ln268_1_fu_355_p0),
    .din1(mul_ln268_1_fu_355_p1),
    .dout(mul_ln268_1_fu_355_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table_load_1_reg_398 <= exp_table_q0;
        exp_table_load_reg_393 <= exp_table_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln51_1_fu_286_p2 = (exp_table_q0 + exp_table_q1);

assign add_ln51_fu_292_p2 = (zext_ln51_fu_282_p1 + zext_ln245_fu_278_p1);

assign and_ln245_1_fu_204_p2 = (xor_ln245_2_fu_198_p2 & tmp_5_fu_190_p3);

assign and_ln245_fu_160_p2 = (xor_ln245_fu_154_p2 & tmp_3_fu_146_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln268_fu_336_p2[25:10]}};

assign ap_return_1 = {{mul_ln268_1_fu_355_p2[25:10]}};

assign exp_table_address0 = zext_ln255_1_fu_273_p1;

assign exp_table_address1 = zext_ln255_fu_242_p1;

assign icmp_ln66_fu_104_p0 = data_0_val;

assign icmp_ln66_fu_104_p1 = data_1_val;

assign icmp_ln66_fu_104_p2 = (($signed(icmp_ln66_fu_104_p0) < $signed(icmp_ln66_fu_104_p1)) ? 1'b1 : 1'b0);

assign invert_table_address0 = zext_ln265_fu_324_p1;

assign mul_ln268_1_fu_355_p0 = sext_ln268_fu_329_p1;

assign mul_ln268_1_fu_355_p1 = mul_ln268_1_fu_355_p10;

assign mul_ln268_1_fu_355_p10 = exp_table_load_1_reg_398;

assign mul_ln268_fu_336_p0 = sext_ln268_fu_329_p1;

assign mul_ln268_fu_336_p1 = mul_ln268_fu_336_p10;

assign mul_ln268_fu_336_p10 = exp_table_load_reg_393;

assign select_ln245_1_fu_234_p3 = ((xor_ln245_1_fu_166_p2[0:0] == 1'b1) ? select_ln245_fu_216_p3 : tmp_fu_224_p4);

assign select_ln245_2_fu_247_p3 = ((and_ln245_1_fu_204_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln245_3_fu_265_p3 = ((xor_ln245_3_fu_210_p2[0:0] == 1'b1) ? select_ln245_2_fu_247_p3 : tmp_1_fu_255_p4);

assign select_ln245_fu_216_p3 = ((and_ln245_fu_160_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln51_fu_316_p3 = ((tmp_6_fu_298_p3[0:0] == 1'b1) ? 9'd511 : tmp_2_cast_fu_306_p4);

assign sext_ln245_1_fu_128_p1 = $signed(x_max_fu_116_p3);

assign sext_ln245_2_fu_172_p0 = data_1_val;

assign sext_ln245_2_fu_172_p1 = sext_ln245_2_fu_172_p0;

assign sext_ln245_fu_124_p0 = data_0_val;

assign sext_ln245_fu_124_p1 = sext_ln245_fu_124_p0;

assign sext_ln268_fu_329_p1 = $signed(invert_table_q0);

assign sub_ln245_1_fu_176_p2 = ($signed(sext_ln245_2_fu_172_p1) - $signed(sext_ln245_1_fu_128_p1));

assign sub_ln245_fu_132_p2 = ($signed(sext_ln245_fu_124_p1) - $signed(sext_ln245_1_fu_128_p1));

assign tmp_1_fu_255_p4 = {{sub_ln245_1_fu_176_p2[15:6]}};

assign tmp_2_cast_fu_306_p4 = {{add_ln51_1_fu_286_p2[16:8]}};

assign tmp_2_fu_138_p3 = sub_ln245_fu_132_p2[32'd16];

assign tmp_3_fu_146_p3 = sub_ln245_fu_132_p2[32'd15];

assign tmp_4_fu_182_p3 = sub_ln245_1_fu_176_p2[32'd16];

assign tmp_5_fu_190_p3 = sub_ln245_1_fu_176_p2[32'd15];

assign tmp_6_fu_298_p3 = add_ln51_fu_292_p2[32'd17];

assign tmp_fu_224_p4 = {{sub_ln245_fu_132_p2[15:6]}};

assign x_max_fu_116_p1 = data_0_val;

assign x_max_fu_116_p2 = data_1_val;

assign x_max_fu_116_p3 = ((xor_ln66_fu_110_p2[0:0] == 1'b1) ? x_max_fu_116_p1 : x_max_fu_116_p2);

assign xor_ln245_1_fu_166_p2 = (tmp_3_fu_146_p3 ^ tmp_2_fu_138_p3);

assign xor_ln245_2_fu_198_p2 = (tmp_4_fu_182_p3 ^ 1'd1);

assign xor_ln245_3_fu_210_p2 = (tmp_5_fu_190_p3 ^ tmp_4_fu_182_p3);

assign xor_ln245_fu_154_p2 = (tmp_2_fu_138_p3 ^ 1'd1);

assign xor_ln66_fu_110_p2 = (icmp_ln66_fu_104_p2 ^ 1'd1);

assign zext_ln245_fu_278_p1 = exp_table_q1;

assign zext_ln255_1_fu_273_p1 = select_ln245_3_fu_265_p3;

assign zext_ln255_fu_242_p1 = select_ln245_1_fu_234_p3;

assign zext_ln265_fu_324_p1 = select_ln51_fu_316_p3;

assign zext_ln51_fu_282_p1 = exp_table_q0;

endmodule //myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config7_s
