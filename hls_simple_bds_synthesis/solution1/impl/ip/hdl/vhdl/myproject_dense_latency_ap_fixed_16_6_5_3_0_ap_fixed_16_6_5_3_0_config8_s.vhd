-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv26_248 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001001001000";
    constant ap_const_lv25_8B : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010001011";
    constant ap_const_lv26_1CB : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000111001011";
    constant ap_const_lv26_10A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100001010";
    constant ap_const_lv26_192 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110010010";
    constant ap_const_lv25_1FFFF79 : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111101111001";
    constant ap_const_lv25_91 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010010001";
    constant ap_const_lv26_2E4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001011100100";
    constant ap_const_lv26_3FFFDD7 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110111010111";
    constant ap_const_lv26_142 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000101000010";
    constant ap_const_lv26_26E : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001001101110";
    constant ap_const_lv26_116 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100010110";
    constant ap_const_lv26_3FFFEAB : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010101011";
    constant ap_const_lv26_3FFFE7C : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111001111100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_FFFD : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111101";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln58_fu_381_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_reg_610 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_8_fu_387_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_8_reg_615 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_val_read_reg_620 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_339_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_8_reg_625 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_1_fu_467_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_1_reg_630 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_9_fu_473_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_9_reg_635 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_349_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln42_7_reg_640 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_319_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_9_reg_645 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_329_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_10_reg_650 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_11_reg_655 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_12_reg_660 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_port_reg_data_2_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_3_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_4_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_5_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_6_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_7_val : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_142_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln73_fu_375_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln70_3_fu_411_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln70_5_fu_483_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln70_7_fu_528_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_142_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_143_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_fu_359_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln70_1_fu_398_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln70_4_fu_479_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_143_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_144_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_4_fu_462_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln70_6_fu_489_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_144_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_145_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_fu_393_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_145_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_142_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_349_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln_fu_365_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_fu_393_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_1_fu_398_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_2_fu_407_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_3_fu_411_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_4_fu_416_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln42_4_fu_416_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_430_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_430_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln73_1_fu_438_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln70_2_fu_407_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln73_fu_442_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln42_6_fu_448_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln42_4_fu_462_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_1_fu_403_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_2_fu_426_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_3_fu_458_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_6_fu_489_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln73_1_fu_494_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln73_1_fu_494_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln73_2_fu_502_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln73_fu_506_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln58_4_fu_542_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_5_fu_548_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_3_fu_538_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_6_fu_553_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_2_fu_534_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_5_fu_522_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_12_fu_574_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_6_fu_525_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_13_fu_580_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_11_fu_569_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_14_fu_586_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_10_fu_565_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_7_fu_559_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_15_fu_592_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_16s_11ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_16s_11s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_16s_12s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mul_16s_11ns_26_1_1_U405 : component myproject_mul_16s_11ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_142_p0,
        din1 => grp_fu_142_p1,
        dout => grp_fu_142_p2);

    mul_16s_11s_26_1_1_U406 : component myproject_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_143_p0,
        din1 => grp_fu_143_p1,
        dout => grp_fu_143_p2);

    mul_16s_12s_26_1_1_U407 : component myproject_mul_16s_12s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_144_p0,
        din1 => grp_fu_144_p1,
        dout => grp_fu_144_p2);

    mul_16s_12s_26_1_1_U408 : component myproject_mul_16s_12s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_145_p0,
        din1 => grp_fu_145_p1,
        dout => grp_fu_145_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln58_1_reg_630 <= add_ln58_1_fu_467_p2;
                add_ln58_9_reg_635 <= add_ln58_9_fu_473_p2;
                data_4_val_read_reg_620 <= ap_port_reg_data_4_val;
                trunc_ln42_8_reg_625 <= grp_fu_144_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln58_8_reg_615 <= add_ln58_8_fu_387_p2;
                add_ln58_reg_610 <= add_ln58_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ap_port_reg_data_2_val <= data_2_val;
                ap_port_reg_data_3_val <= data_3_val;
                ap_port_reg_data_4_val <= data_4_val;
                ap_port_reg_data_5_val <= data_5_val;
                ap_port_reg_data_6_val <= data_6_val;
                ap_port_reg_data_7_val <= data_7_val;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln42_10_reg_650 <= grp_fu_142_p2(25 downto 10);
                trunc_ln42_11_reg_655 <= grp_fu_144_p2(25 downto 10);
                trunc_ln42_12_reg_660 <= sub_ln73_fu_506_p2(22 downto 10);
                trunc_ln42_7_reg_640 <= grp_fu_349_p1(24 downto 10);
                trunc_ln42_9_reg_645 <= grp_fu_145_p2(25 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln58_10_fu_565_p2 <= std_logic_vector(unsigned(add_ln58_9_reg_635) + unsigned(add_ln58_8_reg_615));
    add_ln58_11_fu_569_p2 <= std_logic_vector(signed(sext_ln42_5_fu_522_p1) + signed(trunc_ln42_10_reg_650));
    add_ln58_12_fu_574_p2 <= std_logic_vector(unsigned(grp_fu_319_p4) + unsigned(ap_const_lv16_FFFD));
    add_ln58_13_fu_580_p2 <= std_logic_vector(unsigned(add_ln58_12_fu_574_p2) + unsigned(sext_ln42_6_fu_525_p1));
    add_ln58_14_fu_586_p2 <= std_logic_vector(unsigned(add_ln58_13_fu_580_p2) + unsigned(add_ln58_11_fu_569_p2));
    add_ln58_15_fu_592_p2 <= std_logic_vector(unsigned(add_ln58_14_fu_586_p2) + unsigned(add_ln58_10_fu_565_p2));
    add_ln58_1_fu_467_p2 <= std_logic_vector(signed(sext_ln42_1_fu_403_p1) + signed(sext_ln42_2_fu_426_p1));
    add_ln58_2_fu_534_p2 <= std_logic_vector(unsigned(add_ln58_1_reg_630) + unsigned(add_ln58_reg_610));
    add_ln58_3_fu_538_p2 <= std_logic_vector(unsigned(trunc_ln42_8_reg_625) + unsigned(trunc_ln42_9_reg_645));
    add_ln58_4_fu_542_p2 <= std_logic_vector(unsigned(grp_fu_329_p4) + unsigned(ap_const_lv16_2));
    add_ln58_5_fu_548_p2 <= std_logic_vector(unsigned(add_ln58_4_fu_542_p2) + unsigned(trunc_ln42_11_reg_655));
    add_ln58_6_fu_553_p2 <= std_logic_vector(unsigned(add_ln58_5_fu_548_p2) + unsigned(add_ln58_3_fu_538_p2));
    add_ln58_7_fu_559_p2 <= std_logic_vector(unsigned(add_ln58_6_fu_553_p2) + unsigned(add_ln58_2_fu_534_p2));
    add_ln58_8_fu_387_p2 <= std_logic_vector(unsigned(grp_fu_319_p4) + unsigned(grp_fu_339_p4));
    add_ln58_9_fu_473_p2 <= std_logic_vector(unsigned(grp_fu_319_p4) + unsigned(sext_ln42_3_fu_458_p1));
    add_ln58_fu_381_p2 <= std_logic_vector(unsigned(trunc_ln_fu_365_p4) + unsigned(grp_fu_329_p4));
    add_ln73_fu_442_p2 <= std_logic_vector(signed(sext_ln73_1_fu_438_p1) + signed(sext_ln70_2_fu_407_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_ce)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= add_ln58_7_fu_559_p2;
    ap_return_1 <= add_ln58_15_fu_592_p2;

    grp_fu_142_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln73_fu_375_p1, sext_ln70_3_fu_411_p1, sext_ln70_5_fu_483_p1, sext_ln70_7_fu_528_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_142_p0 <= sext_ln70_7_fu_528_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_142_p0 <= sext_ln70_5_fu_483_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_142_p0 <= sext_ln70_3_fu_411_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_142_p0 <= sext_ln73_fu_375_p1(16 - 1 downto 0);
        else 
            grp_fu_142_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_142_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_142_p1 <= ap_const_lv26_10A(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_142_p1 <= ap_const_lv26_1CB(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_142_p1 <= ap_const_lv25_8B(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_142_p1 <= ap_const_lv26_248(11 - 1 downto 0);
        else 
            grp_fu_142_p1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_143_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, sext_ln42_fu_359_p1, sext_ln70_1_fu_398_p1, sext_ln70_4_fu_479_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_143_p0 <= sext_ln70_4_fu_479_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_143_p0 <= sext_ln70_1_fu_398_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_143_p0 <= sext_ln42_fu_359_p1(16 - 1 downto 0);
        else 
            grp_fu_143_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_143_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_143_p1 <= ap_const_lv25_91(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_143_p1 <= ap_const_lv25_1FFFF79(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_143_p1 <= ap_const_lv26_192(11 - 1 downto 0);
        else 
            grp_fu_143_p1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_144_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, sext_ln73_fu_375_p1, sext_ln42_4_fu_462_p1, sext_ln70_6_fu_489_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_144_p0 <= sext_ln70_6_fu_489_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_144_p0 <= sext_ln42_4_fu_462_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_144_p0 <= sext_ln73_fu_375_p1(16 - 1 downto 0);
        else 
            grp_fu_144_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_144_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_144_p1 <= ap_const_lv26_142(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_144_p1 <= ap_const_lv26_3FFFDD7(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_144_p1 <= ap_const_lv26_2E4(12 - 1 downto 0);
        else 
            grp_fu_144_p1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_145_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln70_5_fu_483_p1, sext_ln70_7_fu_528_p1, sext_ln42_fu_359_p1, sext_ln70_fu_393_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_145_p0 <= sext_ln70_7_fu_528_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_145_p0 <= sext_ln70_5_fu_483_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_145_p0 <= sext_ln70_fu_393_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_145_p0 <= sext_ln42_fu_359_p1(16 - 1 downto 0);
        else 
            grp_fu_145_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_145_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_145_p1 <= ap_const_lv26_3FFFE7C(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_145_p1 <= ap_const_lv26_3FFFEAB(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_145_p1 <= ap_const_lv26_116(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_145_p1 <= ap_const_lv26_26E(12 - 1 downto 0);
        else 
            grp_fu_145_p1 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_319_p4 <= grp_fu_145_p2(25 downto 10);
    grp_fu_329_p4 <= grp_fu_142_p2(25 downto 10);
    grp_fu_339_p4 <= grp_fu_144_p2(25 downto 10);
    grp_fu_349_p1 <= grp_fu_143_p2(25 - 1 downto 0);
    grp_fu_349_p4 <= grp_fu_349_p1(24 downto 10);
        sext_ln42_1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_349_p4),16));

        sext_ln42_2_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_4_fu_416_p4),16));

        sext_ln42_3_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_6_fu_448_p4),16));

    sext_ln42_4_fu_462_p0 <= ap_port_reg_data_4_val;
        sext_ln42_4_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln42_4_fu_462_p0),26));

        sext_ln42_5_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_7_reg_640),16));

        sext_ln42_6_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_12_reg_660),16));

        sext_ln42_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_0_val),26));

    sext_ln70_1_fu_398_p0 <= ap_port_reg_data_2_val;
        sext_ln70_1_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_1_fu_398_p0),25));

    sext_ln70_2_fu_407_p0 <= ap_port_reg_data_3_val;
        sext_ln70_2_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_2_fu_407_p0),24));

    sext_ln70_3_fu_411_p0 <= ap_port_reg_data_3_val;
        sext_ln70_3_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_3_fu_411_p0),25));

        sext_ln70_4_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_4_val_read_reg_620),25));

        sext_ln70_5_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_5_val),26));

    sext_ln70_6_fu_489_p0 <= ap_port_reg_data_6_val;
        sext_ln70_6_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_6_fu_489_p0),26));

        sext_ln70_7_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_7_val),26));

    sext_ln70_fu_393_p0 <= ap_port_reg_data_2_val;
        sext_ln70_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln70_fu_393_p0),26));

        sext_ln73_1_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_430_p3),24));

        sext_ln73_2_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln73_1_fu_494_p3),23));

        sext_ln73_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_1_val),26));

    shl_ln73_1_fu_494_p1 <= ap_port_reg_data_6_val;
    shl_ln73_1_fu_494_p3 <= (shl_ln73_1_fu_494_p1 & ap_const_lv6_0);
    shl_ln_fu_430_p1 <= ap_port_reg_data_3_val;
    shl_ln_fu_430_p3 <= (shl_ln_fu_430_p1 & ap_const_lv7_0);
    sub_ln73_fu_506_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(sext_ln73_2_fu_502_p1));
    trunc_ln42_4_fu_416_p1 <= grp_fu_142_p2(25 - 1 downto 0);
    trunc_ln42_4_fu_416_p4 <= trunc_ln42_4_fu_416_p1(24 downto 10);
    trunc_ln42_6_fu_448_p4 <= add_ln73_fu_442_p2(23 downto 10);
    trunc_ln_fu_365_p4 <= grp_fu_143_p2(25 downto 10);
end behav;
